// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DBrange/didis-comp-bk/domains/user/ports/drivens (interfaces: ForQueryingUser)
//
// Generated by this command:
//
//	mockgen -destination=tests/mocks/mock_for_querying_user.go -package=mocks github.com/DBrange/didis-comp-bk/domains/user/ports/drivens ForQueryingUser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/DBrange/didis-comp-bk/domains/user/models/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockForQueryingUser is a mock of ForQueryingUser interface.
type MockForQueryingUser struct {
	ctrl     *gomock.Controller
	recorder *MockForQueryingUserMockRecorder
}

// MockForQueryingUserMockRecorder is the mock recorder for MockForQueryingUser.
type MockForQueryingUserMockRecorder struct {
	mock *MockForQueryingUser
}

// NewMockForQueryingUser creates a new mock instance.
func NewMockForQueryingUser(ctrl *gomock.Controller) *MockForQueryingUser {
	mock := &MockForQueryingUser{ctrl: ctrl}
	mock.recorder = &MockForQueryingUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForQueryingUser) EXPECT() *MockForQueryingUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockForQueryingUser) CreateUser(arg0 context.Context, arg1 *dto.CreateUserDTOReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockForQueryingUserMockRecorder) CreateUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockForQueryingUser)(nil).CreateUser), arg0, arg1)
}

// GetUserByID mocks base method.
func (m *MockForQueryingUser) GetUserByID(arg0 context.Context, arg1 string) (*dto.GetUserByIDDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", arg0, arg1)
	ret0, _ := ret[0].(*dto.GetUserByIDDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockForQueryingUserMockRecorder) GetUserByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockForQueryingUser)(nil).GetUserByID), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockForQueryingUser) UpdateUser(arg0 context.Context, arg1 string, arg2 *dto.UpdateUserDTOReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockForQueryingUserMockRecorder) UpdateUser(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockForQueryingUser)(nil).UpdateUser), arg0, arg1, arg2)
}
