// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DBrange/didis-comp-bk/domains/profile/ports/drivens (interfaces: ForQueryingProfile)
//
// Generated by this command:
//
//	mockgen -destination=tests/mocks/for_querying_profile.mock.go -package=mocks github.com/DBrange/didis-comp-bk/domains/profile/ports/drivens ForQueryingProfile
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	dto "github.com/DBrange/didis-comp-bk/domains/profile/models/dto"
	gomock "go.uber.org/mock/gomock"
)

// MockForQueryingProfile is a mock of ForQueryingProfile interface.
type MockForQueryingProfile struct {
	ctrl     *gomock.Controller
	recorder *MockForQueryingProfileMockRecorder
}

// MockForQueryingProfileMockRecorder is the mock recorder for MockForQueryingProfile.
type MockForQueryingProfileMockRecorder struct {
	mock *MockForQueryingProfile
}

// NewMockForQueryingProfile creates a new mock instance.
func NewMockForQueryingProfile(ctrl *gomock.Controller) *MockForQueryingProfile {
	mock := &MockForQueryingProfile{ctrl: ctrl}
	mock.recorder = &MockForQueryingProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockForQueryingProfile) EXPECT() *MockForQueryingProfileMockRecorder {
	return m.recorder
}

// CloseProfile mocks base method.
func (m *MockForQueryingProfile) CloseProfile(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseProfile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseProfile indicates an expected call of CloseProfile.
func (mr *MockForQueryingProfileMockRecorder) CloseProfile(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseProfile", reflect.TypeOf((*MockForQueryingProfile)(nil).CloseProfile), arg0, arg1)
}

// GetPersonalInfoByID mocks base method.
func (m *MockForQueryingProfile) GetPersonalInfoByID(arg0 context.Context, arg1 string) (*dto.GetPersonalInfoByIDDTORes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPersonalInfoByID", arg0, arg1)
	ret0, _ := ret[0].(*dto.GetPersonalInfoByIDDTORes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPersonalInfoByID indicates an expected call of GetPersonalInfoByID.
func (mr *MockForQueryingProfileMockRecorder) GetPersonalInfoByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPersonalInfoByID", reflect.TypeOf((*MockForQueryingProfile)(nil).GetPersonalInfoByID), arg0, arg1)
}

// GetProfileAvailabilityInfoByID mocks base method.
func (m *MockForQueryingProfile) GetProfileAvailabilityInfoByID(arg0 context.Context, arg1, arg2 string) (*dto.GetProfileDailyAvailabilityInfoByIDDTORes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileAvailabilityInfoByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*dto.GetProfileDailyAvailabilityInfoByIDDTORes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileAvailabilityInfoByID indicates an expected call of GetProfileAvailabilityInfoByID.
func (mr *MockForQueryingProfileMockRecorder) GetProfileAvailabilityInfoByID(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileAvailabilityInfoByID", reflect.TypeOf((*MockForQueryingProfile)(nil).GetProfileAvailabilityInfoByID), arg0, arg1, arg2)
}

// ModifyPassword mocks base method.
func (m *MockForQueryingProfile) ModifyPassword(arg0 context.Context, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyPassword", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyPassword indicates an expected call of ModifyPassword.
func (mr *MockForQueryingProfileMockRecorder) ModifyPassword(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyPassword", reflect.TypeOf((*MockForQueryingProfile)(nil).ModifyPassword), arg0, arg1, arg2, arg3)
}

// ModifyPersonalInfo mocks base method.
func (m *MockForQueryingProfile) ModifyPersonalInfo(arg0 context.Context, arg1 string, arg2 *dto.ModifyPersonalInfoDTOReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyPersonalInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyPersonalInfo indicates an expected call of ModifyPersonalInfo.
func (mr *MockForQueryingProfileMockRecorder) ModifyPersonalInfo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyPersonalInfo", reflect.TypeOf((*MockForQueryingProfile)(nil).ModifyPersonalInfo), arg0, arg1, arg2)
}

// ModifyProfileAvailability mocks base method.
func (m *MockForQueryingProfile) ModifyProfileAvailability(arg0 context.Context, arg1 string, arg2 *dto.ModifyProfileDailyAvailabilityDTOReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyProfileAvailability", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyProfileAvailability indicates an expected call of ModifyProfileAvailability.
func (mr *MockForQueryingProfileMockRecorder) ModifyProfileAvailability(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyProfileAvailability", reflect.TypeOf((*MockForQueryingProfile)(nil).ModifyProfileAvailability), arg0, arg1, arg2)
}

// RegisterUser mocks base method.
func (m *MockForQueryingProfile) RegisterUser(arg0 context.Context, arg1 *dto.RegisterUserDTOReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockForQueryingProfileMockRecorder) RegisterUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockForQueryingProfile)(nil).RegisterUser), arg0, arg1)
}
